import { Hono } from 'hono'

type Bindings = {
  SECRET_API_KEY: string
  GAS_ENDPOINT: string
  R2: R2Bucket
}

type GasUploadResponse = {
  url: string;
  fileId: string;
};


const app = new Hono<{ Bindings: Bindings }>()

app.post('/upload', async (c) => {
  const {newDocID, imageBase64, fileName, apiKey, recipeInfo } = await c.req.json();
  const GAS_ENDPOINT = c.env.GAS_ENDPOINT;
  const SECRET_API_KEY = c.env.SECRET_API_KEY;

  if (apiKey !== SECRET_API_KEY) {
    return c.json({ error: 'Unauthorized' }, 401);
  }

  // ========== ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ ==========
  const gasResponse = await fetch(GAS_ENDPOINT, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      action: 'upload',
      imageBase64,
      fileName,
      apiKey: SECRET_API_KEY,
    }),
  });

  const gasResult = await gasResponse.json();
  const { url, fileId } = gasResult as GasUploadResponse;

  // ========== index.json „ÅÆÊõ¥Êñ∞ ==========
  let indexData: any[] = [];
  
  const indexObj = await c.env.R2.get('index.json');
  if (indexObj) {
    indexData = await indexObj.json<any[]>();
  }

  const ingredientsNames = recipeInfo.ingredients ?? [];
  const tags = recipeInfo.tags ?? [];
  const glass = recipeInfo.glass ?? '';

  indexData.push({
    key: newDocID,
    name: recipeInfo.name,
    ingredients: ingredientsNames,
    tags: tags, // üëà „Çø„Ç∞ÊÉÖÂ†±„Çí‰øùÂ≠ò
    glass: glass,
    fileId,
  });

  await c.env.R2.put('index.json', JSON.stringify(indexData, null, 2), {
    httpMetadata: { contentType: 'application/json' },
  });

  return c.json({
    message: 'Upload successful',
    fileId: fileId,
    recipeId: newDocID,
  });
});


app.get('/search', async (c) => {
  try {
    const query = c.req.query('q') || '';
    console.log('Ê§úÁ¥¢„ÇØ„Ç®„É™:', query);  // „ÇØ„Ç®„É™Á¢∫Ë™ç

    // Á©∫ÁôΩÂå∫Âàá„Çä„ÅßË§áÊï∞„ÉØ„Éº„Éâ„Å´ÂàÜÂâ≤ÔºàÂÖ®Ëßí„Çπ„Éö„Éº„Çπ„ÇÇËÄÉÊÖÆÔºâ
    const keywords = query
      .split(/\s+/)  // ÂçäËßí„Çπ„Éö„Éº„Çπ„Åæ„Åü„ÅØÈÄ£Á∂ö„Çπ„Éö„Éº„ÇπÂå∫Âàá„Çä
      .filter(Boolean)  // Á©∫ÊñáÂ≠óÂâäÈô§
      .map(word => word.toLowerCase());

    console.log('Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ:', keywords);

    // R2„Åã„Çâindex.jsonÂèñÂæó
    const obj = await c.env.R2.get('index.json');
    if (!obj) {
      console.error('index.json „Åå R2 „Å´Â≠òÂú®„Åó„Åæ„Åõ„Çì');
      return c.json({ error: 'Index file not found' }, 404);
    }

    const text = await obj.text();
    console.log('index.json Ë™≠„ÅøËæº„ÅøÊàêÂäü:', text.substring(0, 100)); // ÂÖàÈ†≠100ÊñáÂ≠ó„Å†„ÅëÂá∫„Åô

    const data = JSON.parse(text) as {
      key: string;
      name: string;
      ingredients: string[];
    }[];

    console.log('„Éë„Éº„ÇπÊàêÂäü„ÄÇ„Éá„Éº„Çø‰ª∂Êï∞:', data.length);

    // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞Âá¶ÁêÜÔºàANDÊ§úÁ¥¢Ôºâ
    const result = data.filter(item => {
      const haystack = [
        item.name.toLowerCase(),
        ...item.ingredients.map(ing => ing.toLowerCase())
      ].join(' ');  // Ê§úÁ¥¢ÂØæË±°„ÅÆÊñáÂ≠óÂàó

      // „Åô„Åπ„Å¶„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã (ANDÊ§úÁ¥¢)
      return keywords.every(keyword => haystack.includes(keyword));
    });

    console.log('Ê§úÁ¥¢ÁµêÊûú‰ª∂Êï∞:', result.length);

    return c.json(result);

  } catch (error) {
    console.error('API ÂÆüË°å‰∏≠„Å´„Ç®„É©„Éº:', error);
    return c.json({ error: 'Internal Server Error', detail: String(error) }, 500);
  }
});

app.post('/delete', async (c) => {
  const { recipeId, apiKey, fileId } = await c.req.json();

  const SECRET_API_KEY = c.env.SECRET_API_KEY;
  const GAS_ENDPOINT = c.env.GAS_ENDPOINT;

  if (apiKey !== SECRET_API_KEY) {
    return c.json({ error: 'Unauthorized' }, 401);
  }

  // ======================
  // 1. index.json Ë™≠„ÅøËæº„Åø
  // ======================
  let indexData: any[] = [];
  const indexObj = await c.env.R2.get('index.json');
  if (indexObj) {
    indexData = await indexObj.json<any[]>();
  } else {
    return c.json({ error: 'Index file not found' }, 404);
  }

  // ======================
  // 2. „É¨„Ç∑„ÉîÊÉÖÂ†±ÂèñÂæó„Å®Èô§Â§ñ
  // ======================
  const targetRecipe = indexData.find(item => item.key === recipeId);
  if (!targetRecipe) {
    return c.json({ error: 'Recipe not found' }, 404);
  }

  const updatedIndexData = indexData.filter(item => item.key !== recipeId);

  // ======================
  // 3. index.json ‰∏äÊõ∏„Åç
  // ======================
  await c.env.R2.put('index.json', JSON.stringify(updatedIndexData, null, 2), {
    httpMetadata: { contentType: 'application/json' },
  });

  // ======================
  // 4. GAS„Å∏ÁîªÂÉèÂâäÈô§‰æùÈ†º
  // ======================
  const gasResponse = await fetch(GAS_ENDPOINT, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      action: 'delete',
      fileId: targetRecipe.fileId ?? fileId, // üîß ‰∏°ÊñπÂØæÂøú
      apiKey: SECRET_API_KEY,
    }),
  });

  const gasResult = await gasResponse.json();

  return c.json({
    message: 'Delete successful',
    gasResult,
  });
});

app.post('/edit', async (c) => {
  const { recipeId, apiKey, recipeInfo = {}, imageBase64, fileName } = await c.req.json();

  const { SECRET_API_KEY, GAS_ENDPOINT, R2 } = c.env;

  // ======== Step 1: Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ ========
  if (apiKey !== SECRET_API_KEY) {
    console.log('[Ë™çË®º„Ç®„É©„Éº] API„Ç≠„Éº„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì');
    return c.json({ error: 'Unauthorized' }, 401);
  }

  console.log('[Âèó‰ø°] recipeId:', recipeId);
  console.log('[Âèó‰ø°] recipeInfo:', recipeInfo);

  // ======== Step 2: index.json„ÅÆÂèñÂæó ========
  const indexObj = await R2.get('index.json');
  if (!indexObj) {
    console.log('[„Ç®„É©„Éº] index.json „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    return c.json({ error: 'Index file not found' }, 404);
  }

  const indexData = await indexObj.json<any[]>();
  const targetIndex = indexData.findIndex(item => item.key === recipeId);
  if (targetIndex === -1) {
    console.log(`[„Ç®„É©„Éº] Ë©≤ÂΩì„É¨„Ç∑„Éî„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${recipeId}`);
    return c.json({ error: 'Recipe not found' }, 404);
  }

  // ======== Step 3: ÂÄ§„ÅÆÊäΩÂá∫ÔºàÂÆâÂÖ®„Å´Ôºâ ========
  const {
    name = '',
    ingredients = [],
    tags = [],
    glass = '',
  } = recipeInfo;

  console.log('[Ëß£Êûê] name:', name);
  console.log('[Ëß£Êûê] ingredients:', ingredients);
  console.log('[Ëß£Êûê] tags:', tags);
  console.log('[Ëß£Êûê] glass:', glass);

  let newFileId = indexData[targetIndex].fileId;

  // ======== Step 4: ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºà‰ªªÊÑèÔºâ ========
  if (imageBase64 && fileName) {
    console.log('[Âá¶ÁêÜ] ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã:', fileName);
    const uploadPayload = {
      action: 'upload',
      imageBase64,
      fileName,
      apiKey: SECRET_API_KEY,
    };

    const uploadRes = await fetch(GAS_ENDPOINT, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(uploadPayload),
    });

    const uploadResult = await uploadRes.json() as GasUploadResponse;
    newFileId = uploadResult.fileId;

    console.log('[„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü] Êñ∞„Åó„ÅÑ fileId:', newFileId);

    // Âè§„ÅÑÁîªÂÉèÂâäÈô§
    const oldFileId = indexData[targetIndex].fileId;
    console.log('[Âá¶ÁêÜ] Âè§„ÅÑÁîªÂÉèÂâäÈô§:', oldFileId);
    await fetch(GAS_ENDPOINT, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        action: 'delete',
        fileId: oldFileId,
        apiKey: SECRET_API_KEY,
      }),
    });
  }

  // ======== Step 5: indexData „ÅÆ‰∏äÊõ∏„ÅçÂâç„É≠„Ç∞ ========
  console.log('[Êõ¥Êñ∞Ââç„Éá„Éº„Çø]', indexData[targetIndex]);

  // ======== Step 6: index.json Êõ¥Êñ∞ ========
  indexData[targetIndex] = {
    ...indexData[targetIndex],
    name,
    ingredients: Array.isArray(ingredients) ? ingredients : [],
    tags: Array.isArray(tags) ? tags : [],
    glass: typeof glass === 'string' ? glass : '',
    fileId: newFileId,
  };

  console.log('[Êõ¥Êñ∞Âæå„Éá„Éº„Çø]', indexData[targetIndex]);

  // ======== Step 7: index.json ‰øùÂ≠ò ========
  await R2.put('index.json', JSON.stringify(indexData, null, 2), {
    httpMetadata: { contentType: 'application/json' },
  });

  // ======== Step 8: Êõ∏„ÅçËæº„ÅøÁ¢∫Ë™çÁî®„ÅÆÂÜçÂèñÂæóÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ ========
  // const verify = await R2.get('index.json');
  // const verifyText = await verify.text();
  // console.log('[Êõ∏„ÅçËæº„ÅøÂæå index.json]', verifyText);

  return c.json({
    message: 'Edit successful',
    recipeId,
    fileId: newFileId,
    updated: indexData[targetIndex],
  });
});



app.post('/material/register', async (c) => {
  const { id, name, categoryMain, categorySub, apiKey } = await c.req.json();

  const SECRET_API_KEY = c.env.SECRET_API_KEY;

  if (apiKey !== SECRET_API_KEY) {
    return c.json({ error: 'Unauthorized' }, 401);
  }

  // ======================
  // 1. materials_index.json Ë™≠„ÅøËæº„Åø
  // ======================
  let indexData: any[] = [];
  const indexObj = await c.env.R2.get('materials_index.json');
  if (indexObj) {
    indexData = await indexObj.json<any[]>();
  }

  // ======================
  // 2. Êó¢„Å´Â≠òÂú®„Åô„ÇãID„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÔºàÈáçË§áÈò≤Ê≠¢Ôºâ
  // ======================
  const alreadyExists = indexData.some((item) => item.id === id);
  if (alreadyExists) {
    return c.json({ message: 'Material already registered' }, 200);
  }

  // ======================
  // 3. Êñ∞Ë¶èÊùêÊñô„Éá„Éº„Çø„ÇíËøΩÂä†
  // ======================
  indexData.push({
    id,              // Firestore„ÅÆID
    name,            // ÊùêÊñôÂêç
    categoryMain,    // Â§ßÂàÜÈ°û
    categorySub      // Â∞èÂàÜÈ°û
  });

  // ======================
  // 4. materials_index.json ‰∏äÊõ∏„Åç‰øùÂ≠ò
  // ======================
  await c.env.R2.put('materials_index.json', JSON.stringify(indexData, null, 2), {
    httpMetadata: { contentType: 'application/json' },
  });

  return c.json({ message: 'Material registered successfully' });
});


app.get('/material/search', async (c) => {
  try {
    const query = c.req.query('q') || '';
    const categoryMainQuery = c.req.query('categoryMain') || '';
    const categorySubQuery = c.req.query('categorySub') || '';

    console.log('Ê§úÁ¥¢„ÇØ„Ç®„É™:', query);
    console.log('„É°„Ç§„É≥„Ç´„ÉÜ„Ç¥„É™Ê§úÁ¥¢:', categoryMainQuery);
    console.log('„Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™Ê§úÁ¥¢:', categorySubQuery);

    // ========================
    // 1. R2„Åã„Çâmaterials_index.json„ÇíË™≠„ÅøËæº„Åø
    // ========================
    const obj = await c.env.R2.get('materials_index.json');
    if (!obj) {
      console.error('materials_index.json „ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì');
      return c.json({ error: 'Index file not found' }, 404);
    }

    const text = await obj.text();
    console.log('materials_index.json Ë™≠„ÅøËæº„ÅøÊàêÂäü (ÂÖàÈ†≠100ÊñáÂ≠ó):', text.substring(0, 100));

    const data = JSON.parse(text) as {
      id: string;
      name: string;
      categoryMain: string;
      categorySub: string;
    }[];

    console.log('„Éá„Éº„Çø‰ª∂Êï∞:', data.length);

    // ========================
    // 2. „ÇØ„Ç®„É™„ÅÆÂàÜÂâ≤„Å®Â∞èÊñáÂ≠óÂ§âÊèõ
    // ========================
    const keywords = query
      .split(/\s+/) // „Çπ„Éö„Éº„ÇπÂå∫Âàá„Çä
      .filter(Boolean) // Á©∫ÊñáÂ≠óÂâäÈô§
      .map(k => k.toLowerCase());

    const lowerCategoryMain = categoryMainQuery.toLowerCase();
    const lowerCategorySub = categorySubQuery.toLowerCase();

    // ========================
    // 3. „Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    // ========================
    const result = data.filter(item => {
      // „Ç≠„Éº„ÉØ„Éº„ÉâÂÖ®„Å¶„Å´ÈÉ®ÂàÜ‰∏ÄËá¥„Åô„Çã„Åã (ANDÊù°‰ª∂)
      const matchKeywords = keywords.every(keyword =>
        item.name.toLowerCase().includes(keyword) ||
        item.categoryMain.toLowerCase().includes(keyword) ||
        item.categorySub.toLowerCase().includes(keyword)
      );

      // „Ç´„ÉÜ„Ç¥„É™ÂÆåÂÖ®‰∏ÄËá¥ (Á©∫„Å™„Çâ„Çπ„Ç≠„ÉÉ„Éó)
      const matchCategoryMain = !categoryMainQuery || item.categoryMain.toLowerCase() === lowerCategoryMain;
      const matchCategorySub = !categorySubQuery || item.categorySub.toLowerCase() === lowerCategorySub;

      return (keywords.length === 0 || matchKeywords) && matchCategoryMain && matchCategorySub;
    });

    console.log('Ê§úÁ¥¢ÁµêÊûú‰ª∂Êï∞:', result.length);

    // ========================
    // 4. ÁµêÊûúËøîÂç¥
    // ========================
    return c.json(result);

  } catch (error) {
    console.error('Ê§úÁ¥¢API „Ç®„É©„Éº:', error);
    return c.json({ error: 'Internal Server Error', detail: String(error) }, 500);
  }
});

app.get('/recommend', async (c) => {
});


export default app
